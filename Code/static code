
def print_grid(arr):
    for i in range(7):
        for j in range(7):
            print(arr[i][j], end=" ")
        print()


def find_empty_location(arr, l):
    for row in range(7):
        for col in range(7):
            if (arr[row][col] == 0):
                l[0] = row
                l[1] = col
                return True
    return False


def is_less_than(arr):
    for row in range(7):
        for col in range(7):
            if (arr[row][col] == '<') and (arr[row][col - 1] < arr[row][col + 1]):
                return True
    return False


def is_greater_than(arr):
    for row in range(7):
        for col in range(7):
            if (arr[row][col] == '>') and (arr[row][col - 1] > arr[row][col + 1]):
                return True
    return False


def is_above(arr, col):
    for i in range(7):
        if (arr[i][col] == '^') and (arr[i + 1][col] > arr[i - 1][col]):
            return True
    return False


def is_below(arr, col, num):
    for i in range(7):
        if (arr[i][col] == 'v') and (arr[i + 1][col] < arr[i - 1][col]):
            return True
    return False


def is_used_in_row(arr, row, num):
    for i in range(7):
        if (arr[row][i] == num):
            return True
    return False


def is_used_in_col(arr, col, num):
    for i in range(7):
        if (arr[i][col] == num):
            return True
    return False


def is_safe_location(arr, row, col, num):
    return not is_used_in_row(arr, row, num) and not is_used_in_col(arr, col, num)


def solve(arr):
    l = [0, 0]
    if (not find_empty_location(arr, l)):
        return True
    row = l[0]
    col = l[1]
    for num in range(1, 5):
        if (is_safe_location(arr, row, col, num)):
            arr[row][col] = num
            if (solve(arr)):
                return True
            arr[row][col] = 0
    return False


def futoshiki():
    grid = [[0 for x in range(7)] for y in range(7)]
    grid = [[1, '|<|', 0, '||', 0, '|<|', 0],
            ['--', '--', '--', '--', '--', '--', ''],
            [0, '|<|', 0, '||', 2, '||', 0],
            ['--', '--', '--', '--', '--', '--', ''],
            [3, '||', 0, '||', 0, '||', 0],
            ['--', '--', '--', '--', '--', '--', ''],
            [0, '|<|', 4, '||', 0, '||', 0]]
    print_grid(grid)
    print("Solution:")
    if (solve(grid)):
        return print_grid(grid)
    else:
        return "not possible"


print(futoshiki())
